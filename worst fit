#include <stdio.h>

#define MAX_PARTITIONS 10

void displayMemoryStatus(int memoryPartitions[], int numPartitions) {
    printf("Memory Partitions: ");
    for (int i = 0; i < numPartitions; i++) {
        printf("%d KB ", memoryPartitions[i]);
    }
    printf("\n");
}

void worstFit(int memoryPartitions[], int numPartitions, int processSizes[], int numProcesses) {
    int allocation[MAX_PARTITIONS] = {-1}; // To store the allocation status for each process

    for (int i = 0; i < numProcesses; i++) {
        int worstFitIndex = -1;
        int maxAvailable = 0;

        for (int j = 0; j < numPartitions; j++) {
            if (allocation[j] == -1 && memoryPartitions[j] >= processSizes[i]) {
                if (memoryPartitions[j] > maxAvailable) {
                    worstFitIndex = j;
                    maxAvailable = memoryPartitions[j];
                }
            }
        }

        if (worstFitIndex != -1) {
            // Allocate the process to the worst-fit partition
            allocation[worstFitIndex] = i;

            // Reduce the available memory in the partition
            memoryPartitions[worstFitIndex] -= processSizes[i];
        }
    }

    printf("Process Allocation: ");
    for (int i = 0; i < numPartitions; i++) {
        if (allocation[i] != -1) {
            printf("P%d (%d KB) ", allocation[i] + 1, processSizes[allocation[i]]);
        } else {
            printf("Unallocated ");
        }
    }
    printf("\n");

    displayMemoryStatus(memoryPartitions, numPartitions);
}

int main() {
    int memoryPartitions[] = {40, 10, 30, 60};
    int numPartitions = sizeof(memoryPartitions) / sizeof(memoryPartitions[0]);

    int processSizes[] = {100, 50, 30, 120, 35};
    int numProcesses = sizeof(processSizes) / sizeof(processSizes[0]);

    printf("Initial ");
    displayMemoryStatus(memoryPartitions, numPartitions);

    worstFit(memoryPartitions, numPartitions, processSizes, numProcesses);

    return 0;
}
