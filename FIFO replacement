#include <stdio.h>

#define MAX_PAGE_FRAMES 10

int findPageInFrames(int page, int frames[], int numFrames) {
    for (int i = 0; i < numFrames; i++) {
        if (frames[i] == page) {
            return 1; // Page found in frames
        }
    }
    return 0; // Page not found in frames
}

int main() {
    int numPageFrames = 3;
    int pageReferenceSequence[] = {4, 1, 2, 4, 3, 2, 1, 5};
    int numPageReferences = sizeof(pageReferenceSequence) / sizeof(pageReferenceSequence[0]);

    int frames[MAX_PAGE_FRAMES];
    int pageFaults = 0;

    printf("Page Reference Sequence: ");
    for (int i = 0; i < numPageReferences; i++) {
        printf("%d ", pageReferenceSequence[i]);
    }
    printf("\n");

    for (int i = 0; i < MAX_PAGE_FRAMES; i++) {
        frames[i] = -1; // Initialize frames with -1 to denote an empty slot
    }

    int frameIndex = 0;

    for (int i = 0; i < numPageReferences; i++) {
        int currentPage = pageReferenceSequence[i];

        if (!findPageInFrames(currentPage, frames, numPageFrames)) {
            // Page fault: Page is not in frames, replace the oldest page
            printf("Page fault for page %d\n", currentPage);
            pageFaults++;

            frames[frameIndex] = currentPage;
            frameIndex = (frameIndex + 1) % numPageFrames;

            // Display the current state of frames
            printf("Current frames: ");
            for (int j = 0; j < numPageFrames; j++) {
                printf("%d ", frames[j]);
            }
            printf("\n");
        }
    }

    printf("Total number of page faults: %d\n", pageFaults);

    return 0;
}
