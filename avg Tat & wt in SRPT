#include <stdio.h>

struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int waitingTime;
    int turnaroundTime;
};

void swap(struct Process* a, struct Process* b) {
    struct Process temp = *a;
    *a = *b;
    *b = temp;
}

void sortProcesses(struct Process processes[], int numProcesses) {
    // Sort processes based on arrival time
    for (int i = 0; i < numProcesses - 1; i++) {
        for (int j = 0; j < numProcesses - i - 1; j++) {
            if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

int findShortestRemainingTime(struct Process processes[], int numProcesses, int currentTime) {
    int shortestIndex = -1;
    int shortestTime = -1;

    for (int i = 0; i < numProcesses; i++) {
        if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0) {
            if (shortestIndex == -1 || processes[i].remainingTime < shortestTime) {
                shortestIndex = i;
                shortestTime = processes[i].remainingTime;
            }
        }
    }

    return shortestIndex;
}

void srptScheduling(struct Process processes[], int numProcesses) {
    int currentTime = 0;
    int completedProcesses = 0;

    while (completedProcesses < numProcesses) {
        int shortestIndex = findShortestRemainingTime(processes, numProcesses, currentTime);

        if (shortestIndex == -1) {
            currentTime++;
        } else {
            processes[shortestIndex].remainingTime--;
            currentTime++;

            if (processes[shortestIndex].remainingTime == 0) {
                completedProcesses++;
                processes[shortestIndex].turnaroundTime = currentTime - processes[shortestIndex].arrivalTime;
                processes[shortestIndex].waitingTime = processes[shortestIndex].turnaroundTime - processes[shortestIndex].burstTime;
            }
        }
    }
}

int main() {
    int numProcesses = 4;
    struct Process processes[] = {
        {1, 0, 5, 5, 0, 0},
        {2, 1, 3, 3, 0, 0},
        {3, 2, 3, 3, 0, 0},
        {4, 4, 1, 1, 0, 0}
    };

    sortProcesses(processes, numProcesses);
    srptScheduling(processes, numProcesses);

    // Display results
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < numProcesses; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processID, processes[i].arrivalTime, processes[i].burstTime,
               processes[i].waitingTime, processes[i].turnaroundTime);
    }

    // Calculate and display average waiting time and average turnaround time
    float avgWaitingTime = 0, avgTurnaroundTime = 0;
    for (int i = 0; i < numProcesses; i++) {
        avgWaitingTime += processes[i].waitingTime;
        avgTurnaroundTime += processes[i].turnaroundTime;
    }

    avgWaitingTime /= numProcesses;
    avgTurnaroundTime /= numProcesses;

    printf("\nAverage Waiting Time: %.2f ms\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f ms\n", avgTurnaroundTime);

    return 0;
}
